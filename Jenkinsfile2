pipeline{
    agent none
    tools { 
        maven 'maven-3.8.6' 
    }

    environment {
        dockerImage = 'gkiran04/mywebapp:latest'
        dockerRegistry = 'https://registry.hub.docker.com'
        dockerCredentialsId = 'Docker_Hub'
    }

    stages{

        stage('Checkout'){
            agent any
            steps{
                git branch: 'main', url: 'https://github.com/gkiran04/DevSecOps-project.git'
            }
        }

        /* stage('Code Analysis'){
            steps{
                withSonarQubeEnv('sonar') {
                        sh 'mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=devsecops-project-key '
                        
                        
                }
            }
        }

        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
        } */

        stage('Build'){
            agent any
            steps{
                sh 'mvn clean package -Dmaven.test.skip=true'
            }
        }

        /* stage('Deploy to Artifactory') {
            steps {
                script {
                    def server = Artifactory.server('defaultjfrog')
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "./target/demo-0.0.1-SNAPSHOT.jar",
                                "target": "DEMOARTIFACTORY/"
                            }
                            
                        ]
                    }"""

                    server.upload(uploadSpec)
                }
            }
        }

        stage('Image Build'){
            steps{
                sh 'sudo docker build . -t myapp'
            }
        } */

        stage('Image Build & Push') {
            agent any
            steps {
                // Checkout source code from your repository if needed

                // Build Docker image
                script {
                    docker.withRegistry(dockerRegistry, dockerCredentialsId) {
                        def dockerImage = docker.build(env.dockerImage,'-f Dockerfile .')
                        dockerImage.push()
                    }    
                }
            }
        }
        

        /* stage('Image Push') {
            steps {
                // Push Docker image to registry
                script {
                    docker.withRegistry(dockerRegistry, dockerCredentialsId) {
                        dockerImage.push()
                    }
                }
            }
        } */

        stage('K8S'){
            agent {label 'k8s-slave'}
            steps{
                dir('kubernetes') {
                    sh 'kubectl apply -f Deployment.yml'
                }
            }
        }
    } // END Stages
} // END Pipeline


/* 
-Dsonar.host.url=http://34.93.14.143:9000 
-Dsonar.login=admin \
                        -Dsonar.login=squ_9e86adbee33e1e4fdf333170161d330fc83a7629
                        
docker.withRegistry(dockerRegistry, dockerCredentialsId) {
                        def dockerImage = docker.build(env.dockerImage, '-f Dockerfile .')
                        dockerImage.push()
                    }                         */